LuaOutputFilter

Description:  Provide a Lua function for content output filtering 
Syntax:   LuaOutputFilter filter_name /path/to/lua/script.lua function_name  
Context:  server config 
Status:  Experimental 
Module:  mod_lua 
Compatibility:  2.4.5 and later 

 Provides a means of adding a Lua function as an output filter. 
As with input filters, output filters work as coroutines, 
first yielding before buffers are sent, then yielding whenever 
a bucket needs to be passed down the chain, and finally (optionally) 
yielding anything that needs to be appended to the input data. The 
global variable  bucket  holds the buckets as they are passed 
onto the Lua script:
 

 LuaOutputFilter myOutputFilter /www/filter.lua output_filter
< Files *.lua >
  SetOutputFilter myOutputFilter
< /Files > 

 --[[
    Example output filter that escapes all HTML entities in the output
]]--
function output_filter(r)
    coroutine.yield("(Handled by myOutputFilter)< br/ >\n") -- Prepend some data to the output,
                                                          -- yield and wait for buckets.
    while bucket do -- For each bucket, do...
        local output = r:escape_html(bucket) -- Escape all output
        coroutine.yield(output) -- Send converted data down the chain
    end
    -- No more buckets available.
end 

 
As with the input filter, the output filter supports denying/skipping a filter 
if it is deemed unwanted:
 
 function output_filter(r)
    if not r.content_type:match("text/html") then
        return -- Simply deny filtering, passing on the original content instead
    end
    coroutine.yield() -- wait for buckets
    ... -- insert filter stuff here
end 

  Lua filters with   mod_filter   
  When a Lua filter is used as the underlying provider via the 
  FilterProvider   directive, filtering 
will only work when the  filter-name  is identical to the  provider-name .
   

 
See " Modifying contents with Lua filters " for more 
information.
 


 