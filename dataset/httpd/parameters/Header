Header

Description:  Configure HTTP response headers 
Syntax:   Header [ condition ] add|append|echo|edit|edit*|merge|set|setifempty|unset|note
 header  [[expr=] value  [ replacement ]
[early|env=[!] varname |expr= expression ]]
  
Context:  server config, virtual host, directory, .htaccess 
Override:  FileInfo 
Status:  Extension 
Module:  mod_headers 
Compatibility:  SetIfEmpty available in 2.4.7 and later, expr=value 
available in 2.4.10 and later 

 This directive can replace, merge or remove HTTP response
    headers. The header is modified just after the content handler
    and output filters are run, allowing outgoing headers to be
    modified. 

      The optional  condition  argument determines which internal
    table of responses headers this directive will operate against. Despite the
    name, the default value of  onsuccess  does  not  limit 
    an  action  to responses with a 2xx status code.  Headers set under
    this condition are still used when, for example, a request is  successfully 
    proxied or generated by CGI, even when they have generated a failing status code. 

     When your action is a function of an existing header, you may need to specify
    a condition of  always , depending on which internal table the
    original header was set in.  The table that corresponds to  always  is
    used for locally generated error responses as well as successful responses.  
    Note also that repeating this directive with both conditions makes sense in
    some scenarios because  always  is not a superset of
     onsuccess  with respect to existing headers: 

       You're adding a header to a locally generated non-success (non-2xx) response, such
            as a redirect, in which case only the table corresponding to
             always  is used in the ultimate response. 
         You're modifying or removing a header generated by a CGI script,
            in which case the CGI scripts are in the table corresponding to
             always  and not in the default table. 
         You're modifying or removing a header generated by some piece of
            the server but that header is not being found by the default
             onsuccess  condition. 
      Separately from the  condition  parameter described above, you 
    can limit an action based on HTTP status codes for e.g. proxied or CGI 
    requests. See the example that uses %{REQUEST_STATUS} in the section above. 

     The action it performs is determined by the first
    argument (second argument if a  condition  is specified).
    This can be one of the following values: 

       add  
     The response header is added to the existing set of headers,
    even if this header already exists. This can result in two
    (or more) headers having the same name. This can lead to
    unforeseen consequences, and in general  set ,
     append  or  merge  should be used instead. 

      append  
     The response header is appended to any existing header of
    the same name. When a new value is merged onto an existing
    header it is separated from the existing header with a comma.
    This is the HTTP standard way of giving a header multiple values. 

      echo  
     Request headers with this name are echoed back in the
    response headers.  header  may be a
     regular expression .
     value  must be omitted. 

      edit  
      edit*  
     If this response header exists, its value is transformed according
    to a  regular expression 
    search-and-replace.  The  value  argument is a  regular expression , and the  replacement 
    is a replacement string, which may contain backreferences or format specifiers.
    The  edit  form will match and replace exactly once
    in a header value, whereas the  edit*  form will replace
     every  instance of the search pattern if it appears more
    than once. 

      merge  
     The response header is appended to any existing header of
    the same name, unless the value to be appended already appears in the
    header's comma-delimited list of values.  When a new value is merged onto
    an existing header it is separated from the existing header with a comma.
    This is the HTTP standard way of giving a header multiple values.
    Values are compared in a case sensitive manner, and after
    all format specifiers have been processed.  Values in double quotes
    are considered different from otherwise identical unquoted values. 

      set  
     The response header is set, replacing any previous header
    with this name. The  value  may be a format string. 

      setifempty  
     The request header is set, but only if there is no previous header
    with this name. 
    Available in 2.4.7 and later. 

      unset  
     The response header of this name is removed, if it exists.
    If there are multiple headers of the same name, all will be
    removed.  value  must be omitted. 

      note  
     The value of the named response  header  is copied into an
    internal note whose name is given by  value .  This is useful
    if a header sent by a CGI or proxied resource is configured to be unset
    but should also be logged. 
    Available in 2.4.7 and later. 

      This argument is followed by a  header  name, which
    can include the final colon, but it is not required. Case is
    ignored for  set ,  append ,  merge ,
     add ,  unset  and  edit .
    The  header  name for  echo 
    is case sensitive and may be a  regular
    expression . 

     For  set ,  append ,  merge  and
     add  a  value  is specified as the next argument.
    If  value 
    contains spaces, it should be surrounded by double quotes.
     value  may be a character string, a string containing 
      mod_headers   specific format specifiers (and character 
    literals), or an  ap_expr  expression prefixed
    with  expr=  
    
      The following format specifiers are supported in  value : 

       Format  Description     %%  
         The percent sign     %t  
         The time the request was received in Universal Coordinated Time
        since the epoch (Jan. 1, 1970) measured in microseconds. The value
        is preceded by  t= .     %D  
         The time from when the request was received to the time the
        headers are sent on the wire. This is a measure of the duration
        of the request. The value is preceded by  D= .
        The value is measured in microseconds.     %l  
         The current load averages of the actual server itself. It is
        designed to expose the values obtained by  getloadavg() 
        and this represents the current load average, the 5 minute average, and
        the 15 minute average. The value is preceded by  l=  with each
        average separated by  / . 
        Available in 2.4.4 and later.
             %i  
         The current idle percentage of httpd (0 to 100) based on available
        processes and threads. The value is preceded by  i= . 
        Available in 2.4.4 and later.
             %b  
         The current busy percentage of httpd (0 to 100) based on available
        processes and threads. The value is preceded by  b= . 
        Available in 2.4.4 and later.
             %{VARNAME}e  
         The contents of the  environment
        variable   VARNAME .     %{VARNAME}s  
         The contents of the  SSL environment
        variable   VARNAME , if   mod_ssl   is enabled.     Note 
       The  %s  format specifier is only available in
      Apache 2.1 and later; it can be used instead of  %e 
      to avoid the overhead of enabling  SSLOptions
      +StdEnvVars .  If  SSLOptions +StdEnvVars  must
      be enabled anyway for some other reason,  %e  will be
      more efficient than  %s . 
     

     For  edit  there is both a  value  argument
    which is a  regular expression ,
    and an additional  replacement  string. As of version 2.4.7
    the replacement string may also contain format specifiers. 

     The  Header  directive may be followed by
    an additional argument, which may be any of: 
       early  
     Specifies  early processing . 
      env=[!] varname   
     The directive is applied if and only if the  environment variable   varname  exists.
        A  !  in front of  varname  reverses the test,
        so the directive applies only if  varname  is unset. 
      expr= expression   
     The directive is applied if and only if  expression 
        evaluates to true. Details of expression syntax and evaluation are
        documented in the  ap_expr  documentation. 
      Except in  early  mode, the
     Header  directives are processed just
    before the response is sent to the network. This means that it is
    possible to set and/or override most headers, except for some headers
    added by the HTTP header filter.  Prior to 2.2.12, it was not possible 
    to change the Content-Type header with this directive. 


 