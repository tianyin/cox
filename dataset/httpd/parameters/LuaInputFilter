LuaInputFilter

Description:  Provide a Lua function for content input filtering 
Syntax:   LuaInputFilter filter_name /path/to/lua/script.lua function_name  
Context:  server config 
Status:  Experimental 
Module:  mod_lua 
Compatibility:  2.4.5 and later 

 Provides a means of adding a Lua function as an input filter. 
As with output filters, input filters work as coroutines, 
first yielding before buffers are sent, then yielding whenever 
a bucket needs to be passed down the chain, and finally (optionally) 
yielding anything that needs to be appended to the input data. The 
global variable  bucket  holds the buckets as they are passed 
onto the Lua script:
 

 LuaInputFilter myInputFilter /www/filter.lua input_filter
< Files *.lua >
  SetInputFilter myInputFilter
< /Files > 

 --[[
    Example input filter that converts all POST data to uppercase.
]]--
function input_filter(r)
    print("luaInputFilter called") -- debug print
    coroutine.yield() -- Yield and wait for buckets
    while bucket do -- For each bucket, do...
        local output = string.upper(bucket) -- Convert all POST data to uppercase
        coroutine.yield(output) -- Send converted data down the chain
    end
    -- No more buckets available.
    coroutine.yield("&amp;filterSignature=1234") -- Append signature at the end
end 

 
The input filter supports denying/skipping a filter if it is deemed unwanted:
 
 function input_filter(r)
    if not good then
        return -- Simply deny filtering, passing on the original content instead
    end
    coroutine.yield() -- wait for buckets
    ... -- insert filter stuff here
end 

 
See " Modifying contents with Lua 
filters " for more information.
 

 